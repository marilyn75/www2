(function () {
var advlist = (function () {
    'use strict';

    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');

    var global$1 = tinymce.util.Tools.resolve('tinymce.util.Tools');


	//CS-LSH : 개별 리스트 스타일 지정 추가
    var applyListFormat = function (editor, listName, styleValue) {
	//console.log("CS-LSH : applyListFormat");
      var cmd = listName === 'UL' ? 'InsertUnorderedList' : 'InsertOrderedList';

	  var setStyleValue = styleValue; var setClassName = "";

	  var defaultStyleList = listName === 'UL' ?['default','circle','disc','square'] : ['default','lower-alpha','lower-greek','lower-roman','upper-alpha','upper-roman'];
	 

	  if(styleValue!="" && !in_array(defaultStyleList,styleValue)){
		  setStyleValue = "none";
		  setClassName = listName === 'UL' ? "c-list0"+styleValue.replace(/[가-힣]+/,'') : "c-olist0"+styleValue.replace(/[가-힣]+/,'');
	  }
      editor.execCommand(cmd, false, styleValue === false ? null : { 'list-style-type': setStyleValue });

	
		
	    //CS-LSH : 리스트 스타일 지정
	    var list, dom = editor.dom, selection = editor.selection;
		var listElm = dom.getParent(selection.getNode(), 'ol,ul');

		var numberStyleList  =getNumberStyles(editor); var listStyleList = getBulletStyles(editor) ;
		for (var i=0;i<numberStyleList.length ;i++ )
		{
			var tmpStyleClassName = in_array(defaultStyleList,numberStyleList[i])? "": "c-olist0"+numberStyleList[i].replace(/[가-힣]+/,'') ;
			if(tmpStyleClassName && dom.hasClass(listElm,tmpStyleClassName) && tmpStyleClassName!=setClassName) { dom.removeClass(listElm,tmpStyleClassName); }
		}
	
		for (var i=0;i<listStyleList.length ;i++ )
		{
			var tmpStyleClassName = in_array(defaultStyleList,listStyleList[i])? "": "c-list0"+listStyleList[i].replace(/[가-힣]+/,'') ;
			if(tmpStyleClassName && dom.hasClass(listElm,tmpStyleClassName) && tmpStyleClassName!=setClassName) { dom.removeClass(listElm,tmpStyleClassName); }
		}

		if(listElm){
			dom.addClass(listElm,"cs-editor-list");
			if(setClassName){			dom.addClass(listElm,setClassName);		}
			
		}

	};

	//CS-LSH : 리스트 지정, 해제 
	var setList = function(editor,cmd,listName,styleValue){
		editor.execCommand(cmd);

		var list, dom = editor.dom, selection = editor.selection;
		var listElm = dom.getParent(selection.getNode(), 'ol,ul');

		if(listElm){
			var setClassName = "";
			var defaultStyleList = listName === 'UL' ?['default','circle','disc','square'] : ['default','lower-alpha','lower-greek','lower-roman','upper-alpha','upper-roman'];
			//기존 스타일 제거
			var numberStyleList  =getNumberStyles(editor); var listStyleList = getBulletStyles(editor) ;
			for (var i=0;i<numberStyleList.length ;i++ )
			{
				var tmpStyleClassName = in_array(defaultStyleList,numberStyleList[i])? "": "c-olist0"+numberStyleList[i].replace(/[가-힣]+/,'') ;
				if(tmpStyleClassName && dom.hasClass(listElm,tmpStyleClassName) && tmpStyleClassName!=setClassName) { dom.removeClass(listElm,tmpStyleClassName); }
			}
		
			for (var i=0;i<listStyleList.length ;i++ )
			{
				var tmpStyleClassName = in_array(defaultStyleList,listStyleList[i])? "": "c-list0"+listStyleList[i].replace(/[가-힣]+/,'') ;
				if(tmpStyleClassName && dom.hasClass(listElm,tmpStyleClassName) && tmpStyleClassName!=setClassName) { dom.removeClass(listElm,tmpStyleClassName); }
			}

			//리스트 스타일 추가
			dom.addClass(listElm,"cs-editor-list");
		}
	
	}
 
	//var Actions = { applyListFormat: applyListFormat };
	var Actions = { applyListFormat: applyListFormat , setList: setList};

    var register = function (editor) {
		console.log("CS-LSH : register");
      editor.addCommand('ApplyUnorderedListStyle', function (ui, value) {
        Actions.applyListFormat(editor, 'UL', value['list-style-type']);
      });
      editor.addCommand('ApplyOrderedListStyle', function (ui, value) {
        Actions.applyListFormat(editor, 'OL', value['list-style-type']);
      });
    };
    var Commands = { register: register };

    var getNumberStyles = function (editor) {
      var styles = editor.getParam('advlist_number_styles', 'default,lower-alpha,lower-greek,lower-roman,upper-alpha,upper-roman,개별스타일1,개별스타일2');
      return styles ? styles.split(/[ ,]/) : [];
    };
    var getBulletStyles = function (editor) {
      var styles = editor.getParam('advlist_bullet_styles', 'default,circle,disc,square,개별스타일1,개별스타일2');
      return styles ? styles.split(/[ ,]/) : [];
    };
    var Settings = {
      getNumberStyles: getNumberStyles,
      getBulletStyles: getBulletStyles
    };

    var isChildOfBody = function (editor, elm) {
      return editor.$.contains(editor.getBody(), elm);
    };
    var isTableCellNode = function (node) {
      return node && /^(TH|TD)$/.test(node.nodeName);
    };
    var isListNode = function (editor) {
      return function (node) {
        return node && /^(OL|UL|DL)$/.test(node.nodeName) && isChildOfBody(editor, node);
      };
    };
    var getSelectedStyleType = function (editor) {
      var listElm = editor.dom.getParent(editor.selection.getNode(), 'ol,ul');
      return editor.dom.getStyle(listElm, 'listStyleType') || '';
    };
    var ListUtils = {
      isTableCellNode: isTableCellNode,
      isListNode: isListNode,
      getSelectedStyleType: getSelectedStyleType
    };

    var styleValueToText = function (styleValue) {
      return styleValue.replace(/\-/g, ' ').replace(/\b\w/g, function (chr) {
        return chr.toUpperCase();
      });
    };
    var toMenuItems = function (styles) {
      return global$1.map(styles, function (styleValue) {
        var text = styleValueToText(styleValue);
        var data = styleValue === 'default' ? '' : styleValue;
        return {
          text: text,
          data: data
        };
      });
    };
    var ListStyles = { toMenuItems: toMenuItems };

    var findIndex = function (list, predicate) {
      for (var index = 0; index < list.length; index++) {
        var element = list[index];
        if (predicate(element)) {
          return index;
        }
      }
      return -1;
    };
    var listState = function (editor, listName) {
      return function (e) {
        var ctrl = e.control;
        editor.on('NodeChange', function (e) {
          var tableCellIndex = findIndex(e.parents, ListUtils.isTableCellNode);
          var parents = tableCellIndex !== -1 ? e.parents.slice(0, tableCellIndex) : e.parents;
          var lists = global$1.grep(parents, ListUtils.isListNode(editor));
          ctrl.active(lists.length > 0 && lists[0].nodeName === listName);
        });
      };
    };

	//CS-LSH : 리스트 목록 활성화 체크
    var updateSelection = function (editor,listName) {
		//console.log("updateSelection");
		
      return function (e) {
		var listElm = editor.dom.getParent(editor.selection.getNode(), 'ol,ul')
        var listStyleType = ListUtils.getSelectedStyleType(editor);
		var activeListItem = "";

		e.control.items().each(function (ctrl) {
			var thisClassName =  "";
			if(/[가-힣]+/.test(ctrl.settings.data)){
				thisClassName = listName === 'UL' ? "c-list0"+ctrl.settings.data.replace(/[가-힣]+/,'') : "c-olist0"+ctrl.settings.data.replace(/[가-힣]+/,'');
			}
			var hasThisStyle =(thisClassName!="" && editor.dom.hasClass(listElm,thisClassName))? true:false;
			if(thisClassName!="" && hasThisStyle ){ ctrl.active(true); activeListItem = ctrl.settings.data;  }
			else if(ctrl.settings.data!="" && listStyleType==ctrl.settings.data){ ctrl.active(true); activeListItem = ctrl.settings.data;  }
			else ctrl.active(false);

		});
		//기본값 선택 활성화
		if(listElm){
			e.control.items().each(function (ctrl) {
				if(ctrl.settings.data=="" && activeListItem=="" ) ctrl.active(true);
			});
		}
      };
    };
    var addSplitButton = function (editor, id, tooltip, cmd, nodeName, styles) {
      editor.addButton(id, {
        active: false,
        type: 'splitbutton',
        tooltip: tooltip,
        menu: ListStyles.toMenuItems(styles),
        onPostRender: listState(editor, nodeName),
        onshow: updateSelection(editor,nodeName),
        onselect: function (e) {
          Actions.applyListFormat(editor, nodeName, e.control.settings.data);
        },
        onclick: function (e) {

		 //console.log("CS-LSH : addSplitButton");
		  //editor.execCommand(cmd);

		  //CS-LSH : 버튼 클릭시 신규 스타일 지정
		  Actions.setList(editor,cmd, nodeName, e.control.settings.data);
         
        }
      });
    };
    var addButton = function (editor, id, tooltip, cmd, nodeName, styles) {
      editor.addButton(id, {
        active: false,
        type: 'button',
        tooltip: tooltip,
        onPostRender: listState(editor, nodeName),
        onclick: function () {
			console.log("btn2");
          
		  editor.execCommand(cmd);
        }
      });
    };
    var addControl = function (editor, id, tooltip, cmd, nodeName, styles) {
      if (styles.length > 0) {
        addSplitButton(editor, id, tooltip, cmd, nodeName, styles);
      } else {
        addButton(editor, id, tooltip, cmd, nodeName, styles);
      }
    };
    var register$1 = function (editor) {
      addControl(editor, 'numlist', 'Numbered list', 'InsertOrderedList', 'OL', Settings.getNumberStyles(editor));
      addControl(editor, 'bullist', 'Bullet list', 'InsertUnorderedList', 'UL', Settings.getBulletStyles(editor));
    };
    var Buttons = { register: register$1 };

    global.add('advlist', function (editor) {
      var hasPlugin = function (editor, plugin) {
        var plugins = editor.settings.plugins ? editor.settings.plugins : '';
        return global$1.inArray(plugins.split(/[ ,]/), plugin) !== -1;
      };
      if (hasPlugin(editor, 'lists')) {
        Buttons.register(editor);
        Commands.register(editor);
      }
    });
    function Plugin () {
    }

    return Plugin;

}());
})();
